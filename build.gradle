// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    ext.kotlin_version = '1.6.21'

    repositories {
        maven { url = uri("https://maven.aliyun.com/repository/central") }
        maven { url = uri("https://maven.aliyun.com/repository/public") }
        maven { url = uri("https://maven.aliyun.com/repository/gradle-plugin") }
        maven { url = uri("https://maven.aliyun.com/repository/google") }

        mavenCentral()
        maven { url 'https://jitpack.io' }
        gradlePluginPortal()
        google()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:7.4.1'
        classpath 'org.greenrobot:greendao-gradle-plugin:3.3.0'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'io.github.wurensen:gradle-android-plugin-aspectjx:3.3.2'
    }

}

allprojects {
    repositories {
        maven { url = uri("https://maven.aliyun.com/repository/central") }
        maven { url = uri("https://maven.aliyun.com/repository/public") }
        maven { url = uri("https://maven.aliyun.com/repository/gradle-plugin") }
        maven { url = uri("https://maven.aliyun.com/repository/google") }

        mavenCentral()
        maven { url 'https://jitpack.io' }
        gradlePluginPortal()
        google()
    }

    gradle.taskGraph.whenReady {
        tasks.each { task ->
            if (task.name.equals('mockableAndroidJar')) {
                task.enabled = false
            }
        }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

def releaseTime() {
    return new Date().format("yyyyMMdd", TimeZone.getTimeZone("UTC"))
}

def getVersionCode = { ->
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'rev-list', '--first-parent', '--count', 'HEAD'
            standardOutput = stdout
        }
        return Integer.parseInt(stdout.toString().trim())
    } catch (ignored) {
        return -1;
    }
}

def getVersionName = { ->
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'describe', '--tags', '--dirty'
            standardOutput = stdout
        }

        def versionName = stdout.toString().trim()
        if (versionName.contains('-')) {
            versionName = versionName.replaceFirst("(\\d+\\.\\d+\\.)(\\d+)", {
                return it[1] + (it[2].toInteger() + 1)
            })
        }
        if (versionName.startsWith("v")) {
            return versionName.substring(1)
        } else {
            return versionName
        }
    } catch (ignored) {
        return null;
    }
}
ext {
    minSdkVersion = 21
    compileSdkVersion = 33
    targetSdkVersion = 30
    pushVersionCode = 7

    gitVersionCode = getVersionCode()
    gitVersionName = getVersionName()
    snapshot = false
    versionBase = gitVersionName
    versionName = snapshot ? versionBase + "-SNAPSHOT" : versionBase
    gitTag = versionName

    // Work
    work_version = "1.0.0-alpha05"
}

task exportVersion(type: Exec) {
    commandLine 'sh'
    doLast {
        file("$projectDir/version.txt").text = """$versionName"""
        file("$projectDir/gitTag.txt").text = """$gitTag"""
    }
}
