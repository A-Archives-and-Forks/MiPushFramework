package top.trumeet.mipush.provider.gen.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import top.trumeet.mipush.provider.event.Event;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "EVENT".
*/
public class EventDao extends AbstractDao<Event, Long> {

    public static final String TABLENAME = "EVENT";

    /**
     * Properties of entity Event.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Pkg = new Property(1, String.class, "pkg", false, "pkg");
        public final static Property Type = new Property(2, int.class, "type", false, "type");
        public final static Property Date = new Property(3, long.class, "date", false, "date");
        public final static Property Result = new Property(4, int.class, "result", false, "result");
        public final static Property Info = new Property(5, String.class, "info", false, "dev_info");
        public final static Property NotificationTitle = new Property(6, String.class, "notificationTitle", false, "noti_title");
        public final static Property NotificationSummary = new Property(7, String.class, "notificationSummary", false, "noti_summary");
    }


    public EventDao(DaoConfig config) {
        super(config);
    }
    
    public EventDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"EVENT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"pkg\" TEXT NOT NULL ," + // 1: pkg
                "\"type\" INTEGER NOT NULL ," + // 2: type
                "\"date\" INTEGER NOT NULL ," + // 3: date
                "\"result\" INTEGER NOT NULL ," + // 4: result
                "\"dev_info\" TEXT," + // 5: info
                "\"noti_title\" TEXT," + // 6: notificationTitle
                "\"noti_summary\" TEXT);"); // 7: notificationSummary
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"EVENT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Event entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getPkg());
        stmt.bindLong(3, entity.getType());
        stmt.bindLong(4, entity.getDate());
        stmt.bindLong(5, entity.getResult());
 
        String info = entity.getInfo();
        if (info != null) {
            stmt.bindString(6, info);
        }
 
        String notificationTitle = entity.getNotificationTitle();
        if (notificationTitle != null) {
            stmt.bindString(7, notificationTitle);
        }
 
        String notificationSummary = entity.getNotificationSummary();
        if (notificationSummary != null) {
            stmt.bindString(8, notificationSummary);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Event entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getPkg());
        stmt.bindLong(3, entity.getType());
        stmt.bindLong(4, entity.getDate());
        stmt.bindLong(5, entity.getResult());
 
        String info = entity.getInfo();
        if (info != null) {
            stmt.bindString(6, info);
        }
 
        String notificationTitle = entity.getNotificationTitle();
        if (notificationTitle != null) {
            stmt.bindString(7, notificationTitle);
        }
 
        String notificationSummary = entity.getNotificationSummary();
        if (notificationSummary != null) {
            stmt.bindString(8, notificationSummary);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Event readEntity(Cursor cursor, int offset) {
        Event entity = new Event( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // pkg
            cursor.getInt(offset + 2), // type
            cursor.getLong(offset + 3), // date
            cursor.getInt(offset + 4), // result
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // info
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // notificationTitle
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // notificationSummary
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Event entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPkg(cursor.getString(offset + 1));
        entity.setType(cursor.getInt(offset + 2));
        entity.setDate(cursor.getLong(offset + 3));
        entity.setResult(cursor.getInt(offset + 4));
        entity.setInfo(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setNotificationTitle(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setNotificationSummary(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Event entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Event entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Event entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
